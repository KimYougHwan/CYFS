// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protos/proof.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct ChallengeSample {
    // message fields
    pub chunk_index: u32,
    pub offset_in_chunk: u64,
    pub sample_len: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChallengeSample {
    fn default() -> &'a ChallengeSample {
        <ChallengeSample as ::protobuf::Message>::default_instance()
    }
}

impl ChallengeSample {
    pub fn new() -> ChallengeSample {
        ::std::default::Default::default()
    }

    // uint32 chunk_index = 1;


    pub fn get_chunk_index(&self) -> u32 {
        self.chunk_index
    }
    pub fn clear_chunk_index(&mut self) {
        self.chunk_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_chunk_index(&mut self, v: u32) {
        self.chunk_index = v;
    }

    // uint64 offset_in_chunk = 2;


    pub fn get_offset_in_chunk(&self) -> u64 {
        self.offset_in_chunk
    }
    pub fn clear_offset_in_chunk(&mut self) {
        self.offset_in_chunk = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset_in_chunk(&mut self, v: u64) {
        self.offset_in_chunk = v;
    }

    // uint32 sample_len = 3;


    pub fn get_sample_len(&self) -> u32 {
        self.sample_len
    }
    pub fn clear_sample_len(&mut self) {
        self.sample_len = 0;
    }

    // Param is passed by value, moved
    pub fn set_sample_len(&mut self, v: u32) {
        self.sample_len = v;
    }
}

impl ::protobuf::Message for ChallengeSample {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.chunk_index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.offset_in_chunk = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sample_len = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.chunk_index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.chunk_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset_in_chunk != 0 {
            my_size += ::protobuf::rt::value_size(2, self.offset_in_chunk, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sample_len != 0 {
            my_size += ::protobuf::rt::value_size(3, self.sample_len, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.chunk_index != 0 {
            os.write_uint32(1, self.chunk_index)?;
        }
        if self.offset_in_chunk != 0 {
            os.write_uint64(2, self.offset_in_chunk)?;
        }
        if self.sample_len != 0 {
            os.write_uint32(3, self.sample_len)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChallengeSample {
        ChallengeSample::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "chunk_index",
                |m: &ChallengeSample| { &m.chunk_index },
                |m: &mut ChallengeSample| { &mut m.chunk_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "offset_in_chunk",
                |m: &ChallengeSample| { &m.offset_in_chunk },
                |m: &mut ChallengeSample| { &mut m.offset_in_chunk },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "sample_len",
                |m: &ChallengeSample| { &m.sample_len },
                |m: &mut ChallengeSample| { &mut m.sample_len },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChallengeSample>(
                "ChallengeSample",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChallengeSample {
        static instance: ::protobuf::rt::LazyV2<ChallengeSample> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChallengeSample::new)
    }
}

impl ::protobuf::Clear for ChallengeSample {
    fn clear(&mut self) {
        self.chunk_index = 0;
        self.offset_in_chunk = 0;
        self.sample_len = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChallengeSample {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChallengeSample {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChallengeDesc {
    // message fields
    pub contract_id: ::std::vec::Vec<u8>,
    pub contract_state: ::std::vec::Vec<u8>,
    pub samples: ::protobuf::RepeatedField<ChallengeSample>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChallengeDesc {
    fn default() -> &'a ChallengeDesc {
        <ChallengeDesc as ::protobuf::Message>::default_instance()
    }
}

impl ChallengeDesc {
    pub fn new() -> ChallengeDesc {
        ::std::default::Default::default()
    }

    // bytes contract_id = 1;


    pub fn get_contract_id(&self) -> &[u8] {
        &self.contract_id
    }
    pub fn clear_contract_id(&mut self) {
        self.contract_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.contract_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.contract_id
    }

    // Take field
    pub fn take_contract_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.contract_id, ::std::vec::Vec::new())
    }

    // bytes contract_state = 2;


    pub fn get_contract_state(&self) -> &[u8] {
        &self.contract_state
    }
    pub fn clear_contract_state(&mut self) {
        self.contract_state.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_state(&mut self, v: ::std::vec::Vec<u8>) {
        self.contract_state = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_state(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.contract_state
    }

    // Take field
    pub fn take_contract_state(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.contract_state, ::std::vec::Vec::new())
    }

    // repeated .ChallengeSample samples = 3;


    pub fn get_samples(&self) -> &[ChallengeSample] {
        &self.samples
    }
    pub fn clear_samples(&mut self) {
        self.samples.clear();
    }

    // Param is passed by value, moved
    pub fn set_samples(&mut self, v: ::protobuf::RepeatedField<ChallengeSample>) {
        self.samples = v;
    }

    // Mutable pointer to the field.
    pub fn mut_samples(&mut self) -> &mut ::protobuf::RepeatedField<ChallengeSample> {
        &mut self.samples
    }

    // Take field
    pub fn take_samples(&mut self) -> ::protobuf::RepeatedField<ChallengeSample> {
        ::std::mem::replace(&mut self.samples, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ChallengeDesc {
    fn is_initialized(&self) -> bool {
        for v in &self.samples {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.contract_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.contract_state)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.samples)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.contract_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.contract_id);
        }
        if !self.contract_state.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.contract_state);
        }
        for value in &self.samples {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.contract_id.is_empty() {
            os.write_bytes(1, &self.contract_id)?;
        }
        if !self.contract_state.is_empty() {
            os.write_bytes(2, &self.contract_state)?;
        }
        for v in &self.samples {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChallengeDesc {
        ChallengeDesc::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "contract_id",
                |m: &ChallengeDesc| { &m.contract_id },
                |m: &mut ChallengeDesc| { &mut m.contract_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "contract_state",
                |m: &ChallengeDesc| { &m.contract_state },
                |m: &mut ChallengeDesc| { &mut m.contract_state },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ChallengeSample>>(
                "samples",
                |m: &ChallengeDesc| { &m.samples },
                |m: &mut ChallengeDesc| { &mut m.samples },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChallengeDesc>(
                "ChallengeDesc",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChallengeDesc {
        static instance: ::protobuf::rt::LazyV2<ChallengeDesc> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChallengeDesc::new)
    }
}

impl ::protobuf::Clear for ChallengeDesc {
    fn clear(&mut self) {
        self.contract_id.clear();
        self.contract_state.clear();
        self.samples.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChallengeDesc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChallengeDesc {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProofDesc {
    // message fields
    pub challenge: ::std::vec::Vec<u8>,
    pub proof: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProofDesc {
    fn default() -> &'a ProofDesc {
        <ProofDesc as ::protobuf::Message>::default_instance()
    }
}

impl ProofDesc {
    pub fn new() -> ProofDesc {
        ::std::default::Default::default()
    }

    // bytes challenge = 1;


    pub fn get_challenge(&self) -> &[u8] {
        &self.challenge
    }
    pub fn clear_challenge(&mut self) {
        self.challenge.clear();
    }

    // Param is passed by value, moved
    pub fn set_challenge(&mut self, v: ::std::vec::Vec<u8>) {
        self.challenge = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_challenge(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.challenge
    }

    // Take field
    pub fn take_challenge(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.challenge, ::std::vec::Vec::new())
    }

    // bytes proof = 2;


    pub fn get_proof(&self) -> &[u8] {
        &self.proof
    }
    pub fn clear_proof(&mut self) {
        self.proof.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof
    }

    // Take field
    pub fn take_proof(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ProofDesc {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.challenge)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.challenge.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.challenge);
        }
        if !self.proof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.proof);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.challenge.is_empty() {
            os.write_bytes(1, &self.challenge)?;
        }
        if !self.proof.is_empty() {
            os.write_bytes(2, &self.proof)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProofDesc {
        ProofDesc::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "challenge",
                |m: &ProofDesc| { &m.challenge },
                |m: &mut ProofDesc| { &mut m.challenge },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "proof",
                |m: &ProofDesc| { &m.proof },
                |m: &mut ProofDesc| { &mut m.proof },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProofDesc>(
                "ProofDesc",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProofDesc {
        static instance: ::protobuf::rt::LazyV2<ProofDesc> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProofDesc::new)
    }
}

impl ::protobuf::Clear for ProofDesc {
    fn clear(&mut self) {
        self.challenge.clear();
        self.proof.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProofDesc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProofDesc {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12protos/proof.proto\"y\n\x0fChallengeSample\x12\x1f\n\x0bchunk_inde\
    x\x18\x01\x20\x01(\rR\nchunkIndex\x12&\n\x0foffset_in_chunk\x18\x02\x20\
    \x01(\x04R\roffsetInChunk\x12\x1d\n\nsample_len\x18\x03\x20\x01(\rR\tsam\
    pleLen\"\x83\x01\n\rChallengeDesc\x12\x1f\n\x0bcontract_id\x18\x01\x20\
    \x01(\x0cR\ncontractId\x12%\n\x0econtract_state\x18\x02\x20\x01(\x0cR\rc\
    ontractState\x12*\n\x07samples\x18\x03\x20\x03(\x0b2\x10.ChallengeSample\
    R\x07samples\"?\n\tProofDesc\x12\x1c\n\tchallenge\x18\x01\x20\x01(\x0cR\
    \tchallenge\x12\x14\n\x05proof\x18\x02\x20\x01(\x0cR\x05proofb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
