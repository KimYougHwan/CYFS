syntax = "proto3";

// StorageObject
message StorageDescContent {
    string id = 1;
    optional bytes hash = 2;
}

message StorageBodyContent {
    bytes value = 1;
}

// ObjectShellObject
message ObjectShellDescContent {
    // true: storage `ObjectId` in `desc` only, without `ObjectDesc`;
    // false: encode the `ObjectDesc` in `desc`.
    bool is_object_id_only = 1;

    // true: calculate the `fix_content_hash` include `desc_sign`;
    // false: calculate the `fix_content_hash` without `desc_sign`.
    bool is_desc_sign_fix = 2;

    // true: calculate the `fix_content_hash` include `body_sign`;
    // false: calculate the `fix_content_hash` without `body_sign`.
    bool is_body_sign_fix = 3;

    // true: calculate the `fix_content_hash` include `nonce`;
    // false: calculate the `fix_content_hash` without `nonce`.
    bool is_nonce_fix = 4;

    // hash of `fix_content` in `ObjectShellBodyContent`
    bytes fix_content_hash = 5;
}

message ObjectShellBodyContent {
    bytes desc = 1;
    optional bytes body = 2;

    optional bytes desc_signatures = 3;
    optional bytes body_signatures = 4;
    optional bytes nonce = 5;
}

// TextObject
message TextDescContent {
    string id = 1;
    string header = 2;
}

message TextContent {
    string value = 1;
}

// Zone
message ZoneDescContent {
    bytes owner = 1;
}

message ZoneBodyContent {
    repeated bytes ood_list = 1;
    repeated bytes known_device_list = 2;
    optional string ood_work_mode = 3;
}

// Admin
message AdminGlobalStateAccessModeData {
    enum Category {
        RootState = 0;
        LocalCache = 1;
    }
    enum AccessMode {
        Read = 0;
        Write = 1;
    }

    Category category = 1;
    AccessMode access_mode = 2;
}

message AdminDescContent {
    enum Command {
        GlobalStateAccessMode = 0;
    }

    bytes target = 1;
    Command cmd = 5;
    oneof data {
        AdminGlobalStateAccessModeData global_state_access_mode = 6;
    }
}

// AppExtInfo
message AppExtInfoDescContent {
    string id = 1;
}

message AppExtInfoBodyContent {
    string info = 1;
}

/////////////////////////////////
// AppLocalStatus
// permission 权限  reason 申请原因 state 是否允许
message AppPermission {
    string permission = 1;
    string reason = 2;
    uint32 state = 3;
}

message AppLocalStatusDesc {
    bytes id = 1;
    uint32 status = 2;
    optional string version = 3;
    optional bytes web_dir = 4;
    repeated AppPermission permissions = 5;
    AppQuota quota = 6;
    string last_status_update_time = 7;
    uint32 sub_error = 8;
    bool auto_update = 9;
}
// AppLocalStatusEnd


//AppSetting
message AppSettingDesc {
    bytes id = 1;
    bool auto_update = 2;
}
// AppSetting


// AppLocalList
// 只记录App列表，状态以AppLocalStatus为准
message AppLocalListDesc {
    string id = 1;
    repeated AppLocalListItem list = 2;
}

message AppLocalListItem {
    bytes app_id = 1;
}
// AppLocalListEnd

// AppCmd
message AddApp {
    optional bytes app_owner_id = 1;
}

message InstallApp {
    string ver = 1;
    bool run_after_install = 2;
}

message AppQuota {
    string mem = 1;
    string disk_space = 2;
    string cpu = 3;
}

message StringBoolMapItem {
    string key = 1;
    bool value = 2;
}

message ModifyAppPermission {
    repeated StringBoolMapItem permission = 1;
}

message CmdCode {
    int32 code = 1;
    optional AddApp add_app = 2;
    optional InstallApp install_app = 3;
    optional ModifyAppPermission app_permission = 4;
    optional AppQuota app_quota = 5;
    optional bool auto_update = 6;
}

message AppCmdDesc {
    bytes app_id = 1;
    CmdCode cmd_code = 2;
}
// AppCmdEnd

// AppCmdList
message AppCmdListDesc {
    string id = 1;
    repeated AppCmdListItem list = 2;
}

message AppCmdListItem {
    bytes cmd = 1;
    uint32 retry_count = 2;
}
// AppCmdListEnd

// AppManagerAction
message DecIpInfo {
    string name = 1;
    string ip = 2;
}

message DecAclInfo {
    string name = 1;
    map<string, bool> acl_info = 2;
}

message RegisterDec {
    string docker_gateway_ip = 1;
    map<string, DecIpInfo> dec_list = 2;
}

message UnregisterDec {
    map<string, string> dec_list = 2;
}

message ModifyAcl {
    map<string, DecAclInfo> dec_list = 2;
}

message AppManagerActionDesc {
    oneof AppManagerActionEnum {
        RegisterDec register_dec = 1;
        UnregisterDec unregister_dec = 2;
        ModifyAcl modify_acl = 3;
    }
}

////////////////////////////////
// AppStatus
message AppStatusDescContent {
    bytes id = 1;
}

message AppStatusContent {
    string version = 1;
    uint32 status = 2;
}

// AppStoreList
message AppStoreListBodyContent {
    repeated bytes app_store_list = 1;
}

// AppList
message AppListDescContent {
    string id = 1;
    string category = 2;
}

message AppListSourceItem {
    bytes app_id = 1;
    bytes app_status = 2;
}

message AppListContent {
    repeated AppListSourceItem source = 1;
}

// DecApp
message DecAppDescContent {
    string id = 1;
}

message StringBytesMapItem {
    string key = 1;
    bytes value = 2;
}

message StringStringMapItem {
    string key = 1;
    string value = 2;
}

message DecAppContent {
    repeated StringBytesMapItem source = 1;
    repeated StringStringMapItem source_desc = 2;
    optional string icon = 3;
    optional string desc = 4;
    repeated StringStringMapItem tags = 5;
}

// AddFriend
message AddFriendDescContent {
    bytes to = 1;
}

// RemoveFriend
message RemoveFriendDescContent {
    bytes to = 1;
}

// FriendOption
message FriendOptionContent {
    optional uint32 auto_confirm = 1;
    optional string msg = 2;
}

// FriendPropety
message FriendPropetyContent {
    
}

// Msg
message MsgObjectContent {
    bytes id = 1;
    string name = 2;
}

message MsgContent {
    enum Type {
        Text = 0;
        Object = 1;
    }
    Type type = 1;
    optional string text = 2;
    optional MsgObjectContent content = 3;
}

message MsgDescContent {
    bytes to = 1;
    MsgContent content = 2;
}

message TransContextDescContent {
    string context_path = 1;
}

message TransContextDeviceChunkCodecInfo {
    optional uint32 start = 1;
    optional uint32 end = 2;
    optional int32 step = 3;
}

message TransContextDevice {
    bytes target = 1;
    enum ChunkCodecDesc {
        Unknown = 0;
        Stream = 1;
        Raptor = 2;
    }
    ChunkCodecDesc chunk_codec_desc  = 2;
    optional TransContextDeviceChunkCodecInfo chunk_codec_info = 3;
}
message TransContextBodyContent {
    repeated TransContextDevice device_list = 1;
}

message NFTFileDesc {
    bytes desc = 1;
}

message NFTListDescContent {
    repeated NFTFileDesc nft_list = 1;
}

message SyncResponseObjectMetaInfo {
    uint64 insert_time = 1;
    optional bytes create_dec_id = 2;
    optional string context = 3;
    optional string last_access_rpath = 4;
    optional uint32 access_string = 5;
}

message GroupRPath {
    bytes group_id = 1;
    bytes dec_id = 2;
    string rpath = 3;
}

message GroupProposalDescContent {
    // target
    GroupRPath rpath = 1;

    // for app
    string method = 2;
    optional bytes params = 3; // blob, app define, it canbe: blob/hash/ObjectId/any other

    // time
    optional bytes meta_block_id = 4;
    optional uint64 effective_begining = 5;
    optional uint64 effective_ending = 6;
}

message GroupProposalBodyContent {
    optional bytes payload = 1;
/*
    message Signature {
        bytes signature = 1; // sign(hash(ProposalId, proponent_id, decide))
        bytes proponent_id = 2;
        bytes decide = 3;
    }

    repeated Signature decide_signatures = 2;
*/
}

/*
message GroupUpdateGroupPropsalParam {
    repeated bytes target_dec_id = 1; // the proccesor decs
    optional bytes from_chunk_id = 2; // Chunk(Encode(Group))
    bytes to_chunk_id = 3; // Chunk(Encode(Group))
}

message GroupPropsalDecideParam {
    bytes signature = 1; // sign(hash(ProposalId, owner, decide))
    bytes proposal_id = 2;
    bytes decide = 3;
}
*/

message HotstuffBlockQc {
    bytes block_id = 1;
    optional bytes prev_block_id = 2; //
    uint64 round = 3;

    message VoteSignature {
        bytes voter = 1;
        bytes signature = 2;
    }

    repeated VoteSignature votes = 4;
}

message HotstuffTimeout {
    uint64 round = 1;

    message VoteSignature {
        bytes voter = 1;
        uint64 high_qc_round = 2;
        bytes signature = 3;
    }

    repeated VoteSignature votes = 2;
    optional bytes group_shell_id = 3; // None if it's same as the block
}

message GroupConsensusBlockDescContent {
    // target
    GroupRPath rpath = 1;

    // input
    bytes body_hash = 2; // hash(Encode(proposals, proposal_result_states, proposal_receiptes))

    // result
    optional bytes result_state_id = 3;
    uint64 height = 4;

    // time
    bytes meta_block_id = 5;

    uint64 round = 7;
    bytes group_shell_id = 8;
}

message GroupConsensusBlockBodyContent {
    message Proposal {
        bytes proposal_id = 1;
        optional bytes proposal_result_state = 2;
        optional bytes proposal_receipt = 3;
        optional bytes context = 4;
    }

    repeated Proposal proposals = 1;

    optional HotstuffBlockQc qc = 2;
    optional HotstuffTimeout tc = 3;
}

/*
message GroupActionDescContent {
    // target
    GroupRPath rpath = 1;

    // for app
    string method = 2;
    optional bytes params = 3; // blob, app define, it canbe: blob/hash/ObjectId/any other

    optional uint64 value = 4;
    optional bytes conclusion = 5;
}
*/
