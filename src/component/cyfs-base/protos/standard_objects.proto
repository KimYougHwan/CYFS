syntax="proto3";

// contract
message ContractBodyContent {
    bytes data = 1;
}

// device
message DeviceBodyContent {
    repeated bytes endpoints = 1;
    repeated bytes sn_list = 2;
    repeated bytes passive_pn_list = 3;
    optional string name = 4;
    optional uint32 bdt_version = 5;
}

// dir
message DirBodyContent {
    enum Type {
        Chunk = 0;
        ObjList = 1;
    }
    Type type = 1;
    optional bytes chunk_id = 2;

    // 使用list编码hash_map
    message ObjItem {
        bytes obj_id = 1;
        bytes value = 2;
    }
    repeated ObjItem obj_list = 3;
}

// file
message ChunkList {
    enum Type {
        ChunkInList = 0;
        ChunkInFile = 1;
        ChunkInBundle = 2;
    }
    enum HashMethod {
        Serial = 0;
    }

    Type type = 1;
    repeated bytes chunk_id_list = 2;
    bytes file_id = 3;
    optional HashMethod hash_method = 4;
}

message FileBodyContent {
    ChunkList chunk_list = 1;
}

// people
message PeopleBodyContent {
    repeated bytes ood_list = 1;
    optional string name = 2;
    optional bytes icon = 3;
    optional string ood_work_mode = 4;
}

message GroupMember {
    bytes id = 1;
    string title = 2;
    string role = 3; // for acl
    uint64 shares = 4;
}

message GroupMethodACL {
    string name = 1;

    // target
    optional bytes target_dec_id = 2;
    optional string r_path = 3;

    double min_support_percent = 4;
    string permissions = 5; // ACL-String
}

message GroupRoleACL {
    string name = 1;

    // target
    optional bytes target_dec_id = 2;
    optional string r_path = 3;
    string method = 4;

    double right_percent = 5;
    bool is_operator = 6;
    string permissions = 7; // ACL-String
}

message GroupJoinSignature {
    bytes signature = 1; // Sign(member_id, group_id, timestamp, hash, is_admin)
    bytes member_id = 2;
    uint64 timestamp = 3;
    bool is_admin = 4;
    bytes hash = 5; // Hash(Encode(Group))
}

message CommonGroupBodyContent {
    string name = 1;
    optional bytes icon = 2;
    string description = 3;

    repeated GroupMember members = 4;

    uint64 total_equity = 5;

    // acl
    repeated GroupMethodACL method_acls = 6;
    repeated GroupRoleACL role_acls = 7;

    repeated bytes ood_list = 8; // 1/0 for every member/admin

    optional uint64 history_block_max = 9;
    optional uint64 history_block_lifespan = 10;
    optional uint64 consensus_interval = 11; // ms

    repeated bytes revoked_conclusions = 12;

    uint64 version = 13;

    repeated GroupJoinSignature join_signatures = 14; // signature for every member/admin
}

// simple_group
message SimpleGroupDescContent {
    bytes unique_id = 1;
    bytes founder_id = 2;
    repeated GroupMember admins = 3;
    uint32 conclusion_limit = 4; // the admins can make any conclusion with the signatures more than ${conclusion_limit}
}

message SimpleGroupBodyContent {
    CommonGroupBodyContent common = 1;
}

// org
message OrgDescContent {
    bytes unique_id = 1;
    bytes founder_id = 2;
}

message OrgBodyContent {
    repeated GroupMember admins = 1;
    optional bytes token_contract = 2;
    CommonGroupBodyContent common = 3;
}

message GroupPackedBodyContent {
    bytes packed_body_id = 1;
}

// tx
message TxBodyContent {
    bytes data = 1;
}

// proof_of_service
message ProofData {
    bytes data = 1;
}

message ProofOfServiceBodyContent {
    ProofData data = 1;
}